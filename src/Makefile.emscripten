# File: Makefile.emscripten
# emscripten makefile for Angband.
#

EM_INCLUDE_PATH = ${EMSDK}/upstream/emscripten/system/include/

# List of functions to not asyncify.
# This is extremely ad-hoc. However not asyncifying aggressively has some advantages:
#  - reduces compiled wasm size
#  - prevents weird stack overflow errors in Safari
NO_ASYNCIFY_FUNCS = quit,quit_fmt,borg_sort_aux,vformat,sscanf,borg_notice,borg_notice_aux1,Term_fresh,Term_fresh_row_pict,Term_fresh_row_text,Term_fresh_row_both,Term_mbstowcs,Term_activate

# Basic compiler stuff
CC = emcc
WARNINGS = -W -Wall -Wextra -Wold-style-definition -Wdeclaration-after-statement -Wmissing-declarations \
		  -Wredundant-decls -Wpointer-arith -Wcast-align -Wwrite-strings -Winline -Wformat-security \
		  -Winit-self -Wmissing-include-dirs -Wundef -Wmissing-format-attribute -Wnested-externs \
		  -Wunreachable-code \
		  -Wno-unused-parameter -Wno-missing-field-initializers -Wno-incompatible-pointer-types-discards-qualifiers \
		  -Wno-misleading-indentation -Wno-unreachable-code
CFLAGS = -Os -g $(WARNINGS) -DWASM=1
LDFLAGS = -s ENVIRONMENT=worker -lidbfs.js -s ASYNCIFY -s ASYNCIFY_REMOVE="$(NO_ASYNCIFY_FUNCS)" # -s ASYNCIFY_ADVISE=1
INCLUDES = -I.
LIBS =

# Import user prefs
# If you don't want to edit this file, put your module redefinitions
# and build flags in "./config"
-include config


# Extract CFLAGS and LIBS from the system definitions
MODULES = $(SYS_stats)
CFLAGS += $(patsubst -l%,,$(MODULES)) $(INCLUDES)
LIBS += $(patsubst -D%,,$(patsubst -I%,, $(MODULES)))


# Object definitions
OBJS = $(BASEOBJS) main-emscripten.o


#### Targets and objects #####

# By default, copy the executable to ../ so that you don't find
# yourself debugging a stale copy.
default: install

# Makefile.inc contains an up-to-date set of object files to compile, so
# we include it
include Makefile.inc


#
# Targets
#

STAGE_DIR := stage
BUILT_DIR := built

JS_FILENAMES := render.js settings.js worker.js
TSC_PATHS := $(JS_FILENAMES:%.js=web/src/%.ts) web/src/types.d.ts web/src/font-type.d.ts
JS_STAGED := $(JS_FILENAMES:%.js=$(STAGE_DIR)/%.js)

STATIC_FILEPATHS = $(wildcard web/static/*)

JS_GEN := $(STAGE_DIR)/angband-gen.js
WASM := $(JS_GEN:.js=.wasm)
ASSET_DATA := $(JS_GEN:.js=.data)

ASSET_DIR := $(STAGE_DIR)/assets/
STATIC := $(STAGE_DIR)/static

.PHONY: install
install: staging
	mkdir -p $(BUILT_DIR)/
	rm -Rf $(BUILT_DIR)/*
	cp web/static/index.html $(BUILT_DIR)/

	mkdir -p $(BUILT_DIR)/assets/
	cp $(ASSET_DATA) $(WASM) $(JS_STAGED) $(JS_GEN) $(BUILT_DIR)/assets/
	cp $(filter-out */index.html, $(STATIC_FILEPATHS)) $(BUILT_DIR)/assets/
	cp -r $(STAGE_DIR)/graf $(BUILT_DIR)/assets/
	@echo "Built $(BUILT_DIR)/"

$(STAGE_DIR):
	mkdir -p $(STAGE_DIR)

# We need a single rule that 'make' knows produces multiple outputs.
# make 4.3 has the &: syntax but we need the wisdom of the ancients.
# The idea here is to make a rule for e.g. 'file1%js file2%js'
# make will execute tsc once, not one per target.
$(subst .,%,$(JS_STAGED)) : $(TSC_PATHS) web/tsconfig.json
	tsc --project ./web --outDir $(STAGE_DIR)

$(STAGE_DIR)/%.js: web/built/%.js | $(STAGE_DIR)
	cp $< $@

.PHONY: staging
staging: $(WASM) $(ASSET_DATA) $(JS_STAGED)
	@ # Expose our graphics png files to the web server.
	@mkdir -p $(STAGE_DIR)/graf/
	@rm -Rf $(STAGE_DIR)/graf/*
	@cp ../lib/xtra/graf/*.png $(STAGE_DIR)/graf/


$(ASSET_DIR): $(wildcard ../lib/**/*) | $(STAGE_DIR)
	@rm -Rf $(ASSET_DIR)
	@mkdir -p $(ASSET_DIR)
	@mkdir -p $@/lib/edit $@/lib/file $@/lib/user $@/lib/help $@/lib/pref $@/lib/xtra/font
	@mkdir -p $@/lib/xtra/sound $@/lib/xtra/graf
	@echo copying files...
	@cp ../lib/edit/*.txt $@/lib/edit
	@cp ../lib/file/*.txt $@/lib/file
	@cp ./borg/borg.txt $@/lib/user/
	@cp ../lib/help/*.txt ../lib/help/*.hlp $@/lib/help
	@cp ../lib/pref/*.prf $@/lib/pref
	@ # Do not need fonts or sounds yet.
	@ # Graphics are handled in HTML - don't need them in assets!
	@ #cp ../lib/xtra/font/*.fon $@/lib/xtra/font
	@ #-cp ../lib/xtra/sound/*.wav $@/lib/xtra/sound
	@ # -cp ../lib/xtra/graf/*.png $@/lib/xtra/graf
	@-cp ../lib/xtra/graf/*.txt $@/lib/xtra/graf
	@cp ../changes.txt ../readme.txt $@

# A trick to invoke emcc once, not once per output file.
# With GNU Make 4.3+ we could use the &: syntax.
$(subst .,%,$(ASSET_DATA) $(WASM) $(JS_GEN)) : $(OBJS) $(ASSET_DIR)
	@# The @ here makes the assets directory the root of the VFS.
	$(CC) $(CFLAGS) $(LDFLAGS) -o $(JS_GEN) --preload-file $(STAGE_DIR)/assets@/ $(OBJS) $(LIBS)

docs: doc/index.html

# Clean up old junk
clean:
	-rm -f $(OBJS) $(EXE)
	-rm -Rf $(STAGE_DIR) $(BUILT_DIR)
	-rm -f ../lib/data/*.raw
