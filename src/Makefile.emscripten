# File: Makefile.emscripten
# emscripten makefile for Angband.
#

EM_INCLUDE_PATH = ${EMSDK}/upstream/emscripten/system/include/

# List of functions to not asyncify.
NO_ASYNCIFY_FUNCS = quit,quit_fmt,borg_sort_aux,vformat,sscanf,borg_notice,borg_notice_aux1,Term_fresh,Term_fresh_row_pict,Term_fresh_row_text,Term_fresh_row_both,Term_mbstowcs,Term_activate

# Basic compiler stuff
CC = emcc
WARNINGS = -W -Wall -Wextra -Wold-style-definition -Wdeclaration-after-statement -Wmissing-declarations \
		  -Wredundant-decls -Wpointer-arith -Wcast-align -Wwrite-strings -Winline -Wformat-security \
		  -Winit-self -Wmissing-include-dirs -Wundef -Wmissing-format-attribute -Wnested-externs \
		  -Wunreachable-code -Wno-unused-parameter -Wno-missing-field-initializers \
		  -Wno-incompatible-pointer-types-discards-qualifiers
CFLAGS = -Os -g $(WARNINGS) -DWASM=1
LDFLAGS = -s ENVIRONMENT=worker -lidbfs.js -s ASYNCIFY -s  -s ASYNCIFY_ADVISE=1 -s ASYNCIFY_REMOVE="$(NO_ASYNCIFY_FUNCS)"
INCLUDES = -I.
LIBS =

#### Things you probably shouldn't change, unless there is a problem ####

# Import user prefs
# If you don't want to edit this file, put your module redefinitions
# and build flags in "./config"
-include config


# Extract CFLAGS and LIBS from the system definitions
MODULES = $(SYS_stats)
CFLAGS += $(patsubst -l%,,$(MODULES)) $(INCLUDES)
LIBS += $(patsubst -D%,,$(patsubst -I%,, $(MODULES)))


# Object definitions
OBJS = $(BASEOBJS) main-emscripten.o


#### Targets and objects #####

# By default, copy the executable to ../ so that you don't find
# yourself debugging a stale copy.
default: install

# Makefile.inc contains an up-to-date set of object files to compile, so
# we include it
include Makefile.inc


#
# Targets
#

STAGE_DIR := ./stage
BUILT_DIR := ./built

JS_FILENAMES := render.js worker.js
TSC_PATHS := $(JS_FILENAMES:%.js=web/src/%.ts) web/src/types.ts
JS_STAGED := $(JS_FILENAMES:%.js=$(STAGE_DIR)/%.js)

STATIC_FILEPATHS = $(wildcard ./web/static/*)

JS_GEN := $(STAGE_DIR)/angband-gen.js
WASM := $(JS_GEN:.js=.wasm)
ASSET_DATA := $(JS_GEN:.js=.data)

ASSET_DIR := $(STAGE_DIR)/assets/
STATIC := $(STAGE_DIR)/static

.PHONY: install
install: staging
	mkdir -p $(BUILT_DIR)/
	rm -Rf $(BUILT_DIR)/*
	cp web/static/angband.html $(BUILT_DIR)/

	mkdir -p $(BUILT_DIR)/assets/
	cp $(ASSET_DATA) $(WASM) $(JS_STAGED) $(JS_GEN) $(BUILT_DIR)/assets/
	cp $(filter-out */angband.html, $(STATIC_FILEPATHS)) $(BUILT_DIR)/assets/
	@echo "Built $(BUILT_DIR)/"

$(STAGE_DIR):
	mkdir -p $(STAGE_DIR)

# Note: this requires GNU Make 4.3 or later.
$(JS_STAGED) &: $(TSC_PATHS) web/tsconfig.json
	tsc --project ./web --outDir $(STAGE_DIR)

$(STAGE_DIR)/%.js: web/built/%.js | $(STAGE_DIR)
	cp $< $@

.PHONY: staging
staging: $(WASM) $(ASSET_DATA) $(JS_STAGED)

$(ASSET_DIR): $(wildcard ../lib/**/*) | $(STAGE_DIR)
	@rm -Rf $(ASSET_DIR)
	@mkdir -p $(ASSET_DIR)
	@mkdir -p $@/lib/edit $@/lib/file $@/lib/user $@/lib/help $@/lib/pref $@/lib/xtra/font
	@mkdir -p $@/lib/xtra/sound $@/lib/xtra/graf
	@echo copying files...
	@cp ../lib/edit/*.txt $@/lib/edit
	@cp ../lib/file/*.txt $@/lib/file
	@cp ./borg/borg.txt $@/lib/user/
	@cp ../lib/help/*.txt ../lib/help/*.hlp $@/lib/help
	@cp ../lib/pref/*.prf $@/lib/pref
	@cp ../lib/xtra/font/*.fon $@/lib/xtra/font
	@echo attempting to install sound and graphics
	@-cp ../lib/xtra/sound/*.wav $@/lib/xtra/sound
	@-cp ../lib/xtra/graf/*.png $@/lib/xtra/graf
	@cp ../changes.txt ../readme.txt $@

# Note: this requires GNU Make 4.3 or later.
$(ASSET_DATA) $(WASM) $(JS_GEN) &: $(OBJS) $(ASSET_DIR)
	@# The @ here makes the assets directory the root of the VFS.
	$(CC) $(CFLAGS) $(LDFLAGS) -o $(JS_GEN) --preload-file $(STAGE_DIR)/assets@/ $(OBJS) $(LIBS)

docs: doc/index.html

# Clean up old junk
clean:
	-rm -f $(OBJS) $(EXE)
	-rm -Rf $(STAGE_DIR) $(BUILT_DIR)
	-rm -f ../lib/data/*.raw

# make a distribution
DIRS = lib/apex lib/bone lib/data lib/edit lib/file lib/help lib/info \
       lib/pref lib/save lib/user lib/xtra/sound lib/xtra/graf lib/xtra/font

TMPDIR = ./$(EXE)-$(VERSION)
dist:
	@-rm -rf $(TMPDIR)
	@echo making directories...
	@for i in $(DIRS) ; do mkdir -p $(TMPDIR)/$$i ; done
	@echo copying files...
	@cp ../lib/edit/*.txt $(TMPDIR)/lib/edit
	@cp ../lib/file/*.txt $(TMPDIR)/lib/file
	@cp ../lib/help/*.txt ../lib/help/*.hlp $(TMPDIR)/lib/help
	@cp ../lib/pref/*.prf $(TMPDIR)/lib/pref
	@cp ../lib/xtra/font/*.txt $(TMPDIR)/lib/xtra/font
	@echo attempting to install sound and graphics
	@-cp ../lib/xtra/sound/*.wav $(TMPDIR)/lib/xtra/sound
	@-cp ../lib/xtra/graf/*.bmp $(TMPDIR)/lib/xtra/graf
	@cp ../changes.txt ../readme.txt $(TMPDIR)
	@cp $(EXE) $(TMPDIR)
	tar czf ../$(EXE)-$(VERSION).tar.gz $(TMPDIR)
	rm -rf $(TMPDIR)


#  Verify module arguments
args:
	@echo CFLAGS = $(CFLAGS)
	@echo LDFLAGS = $(LDFLAGS)
	@echo LIBS = $(LIBS)


# Generate dependencies automatically
depend:
	makedepend -D__MAKEDEPEND__ $(SRCS)


# Some file dependencies
%.o: %.c
	@printf "%10s %-20s\n" CC $<
	$(CC) $(CFLAGS) -o $@ -c $<

# X11 dependencies
main-x11.o: $(HEADERS) main.h

# Basic dependencies for main-xxx.c, main.c
$(MAINOBJS) : main.h $(HEADERS)

# fake Dependency
doc/index.html: $(HEADERS)
	doxygen doc/doxygen.conf
